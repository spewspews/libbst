.TH BST 2
.SH NAME
bstcreate,
bstinsert,
bstdelete,
bstlookup,
bstwalk \- Balanced binary search tree routines
.SH SYNOPSIS
.ta 0.75i 1.5i 2.25i 3i 3.75i 4.5i
.\" .ta 0.7i +0.7i +0.7i +0.7i +0.7i +0.7i +0.7i
.EX
#include <u.h>
#include <libc.h>
#include <bst.h>

typedef struct Bst Bst;

enum Type {
	AVL,
	LLRB
};

Bsttree *bstcreate(enum Type type, int(*cmp)(Bst*, Bst*));
Bst     *bstroot(Bsttree *tree);
Bst     *bstinsert(Bsttree *tree, Bst *new);
Bst     *bstdelete(Bsttree *tree, Bst *key);
Bst     *bstlookup(Bsttree *tree, Bst *key);

#include <bstwalk.h>

extern int bststacksize;

enum Walks {
	PRE,
	POST,
	IN
};

Channel  *bstwalk(Bsttree *tree, Bst *lower, Bst *upper,
                   	enum Walks type);

.EE
.SH DESCRIPTION
These routines allow creation and maintenance of in-memory balanced
binary search tree.
.PP
An empty tree is created by calling
.I bstcreate
with the type of tree and a comparison function as argument.
The implementations available are AVL and left leaning red black
trees (LLRB).
The comparison function should take two pointers to
.B Bst
structures and return an integer less than, equal to, or
greater than 0 as the first is
respectively less than,
equal to, or greater than the second.
.PP
.I Bstinsert
adds a new
tree node into the tree and returns an existing
tree node with the same key that has been removed
from the tree and may be freed.
.I Bstlookup
returns the
node that matches the key or
.B nil
if no node matches.
.I Bstdelete
removes the node matching the key from the tree and returns
it.
.PP
.I Bstroot
returns the root Bst node of the tree.
.PP
.I Bstwalk
returns a pointer to a newly-allocated channel (see
.IR thread (2))
that returns successive elements in a pre-order, post-order,
or in-order walk
of the LLRB tree.
.PP
When either
.I lower
or
.I upper
are not nil, the channel returns only
those elements
greater than or equal to
.I lower
and less than or equal to
.I upper.
When the walk is complete
the channel will return
.I nil
and the corresponding
thread will exit. It is
the caller's responsibility to free the channel. Closing
the channel during a walk signals the thread to exit.
.PP
The stack size for the thread performing an LLRB walk is
specified by setting
.I bststacksize
which by default is eight kilobytes.
.SH EXAMPLES
Intended usage is to embed the
.B Bst
structure anonymously.
As an example, the following will create a key-value store
with strings as keys and integers as values.
.IP
.EX
typedef struct Node {
	Bst;
	char *key;
	int val;
} Node;

int
nodecmp(Bst *la, Bst *lb)
{
	Node *a, *b;

	a = (Node*)la;
	b = (Node*)lb;
	return strcmp(a->key, b->key);
}

int
get(char *key)
{
	Node *h, n;

	n.key = key;
	h = (Node*)bstlookup(&n);
	return h ? h->val : nil;
}
\fI\&...\fP
	Bsttree *t = bstcreate(AVL, nodecmp);

.EE
.SH SOURCE
.B /sys/src/libbst
.SH SEE ALSO
.IR avl (2)
.PP
.nf
Robert Sedgewick, ``Left-leaning Red-Black Trees'',
.B https://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf
.fi
.PP
.nf
Donald Knuth, ``The Art of Computer Programming'', Volume 3. Section 6.2.3
.SH DIAGNOSTICS
.I Bstcreate
returns nil on error and sets the error string if necessary.
